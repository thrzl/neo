<script>
    import { getPalette } from "../../lib/colors";
    import type { Track } from "../../env";
    import marquee from "vanilla-marquee";

    let trackTitleMarquee: marquee;

    String.prototype.toRespectfulLowerCase = function () {
        if (this === this.toUpperCase() || this === this.toLowerCase()) {
            return this.toString();
        }
        // if text is titlecase or first letter of the entire string is uppercase,
        // convert it to lowercase
        return this.toLowerCase();
    };

    document.addEventListener("DOMContentLoaded", async () => {
        const trackTitle = document.getElementById(
            "track-title",
        ) as HTMLDivElement;
        const artistName = document.getElementById(
            "artist-names",
        ) as HTMLDivElement;
        const albumImage = document.getElementById(
            "album-image",
        ) as HTMLImageElement;
        const lastSessionTrack = sessionStorage.getItem("lastTrack");
        if (lastSessionTrack) {
            try {
                updateDOM(JSON.parse(lastSessionTrack));
            } catch {
                console.log(lastSessionTrack);
            }
        }

        function trackTitleOverflowing() {
            if (!trackTitle) {
                console.log("trackTitle is null");
                return false;
            }
            console.log(trackTitle.scrollWidth, trackTitle.clientWidth);
            if (trackTitle.scrollWidth > trackTitle.clientWidth) {
                trackTitleMarquee?.destroy();
                trackTitleMarquee = new marquee(trackTitle, {
                    duplicated: true,
                    recalcResize: true,
                    startVisible: true,
                    gap: 50,
                });
                return true;
            }
            trackTitleMarquee?.destroy();
            return false;
        }

        function updateTrackInfo(recentTrack: Track) {
            const trackTitleInner = Array.from(trackTitle.childNodes).filter(
                (node) => node.nodeName === "A",
            )[0] as HTMLAnchorElement;
            const newTitleInner = trackTitleInner;
            newTitleInner.innerText = recentTrack.name.toRespectfulLowerCase();
            newTitleInner.href = recentTrack.url;
            trackTitle.replaceChild(trackTitleInner, newTitleInner);

            // update artist name:
            artistName.replaceChildren(
                ...recentTrack.artists
                    .map((artist, i) => {
                        const link = document.createElement("a");
                        link.innerText =
                            artist.artist_credit_name.toRespectfulLowerCase();
                        link.href = artist.url;
                        return i !== recentTrack.artists.length - 1
                            ? [link, ", "]
                            : link;
                    })
                    .flat(),
            );
            trackTitleOverflowing();
        }

        function updateDOM(recentTrack: Track | null) {
            if (!recentTrack) return;

            let newImg: HTMLImageElement = albumImage;
            newImg.alt = recentTrack.name;
            newImg.src = recentTrack.image_url
                ? `https://wsrv.nl/?url=${recentTrack.image_url}&w=350&output=webp`
                : "/music.avif";
            albumImage.replaceWith(newImg);
            albumImage.addEventListener("load", () => {
                console.log("getting color");
                getAlbumArtColor(recentTrack.image_palette);
                updateTrackInfo(recentTrack);
                // update track title:
            });
        }

        function getAlbumArtColor(rawPalette: [number, number, number][] = []) {
            const palette = getPalette(rawPalette);

            sessionStorage.setItem("previousImg", albumImage.src);
            sessionStorage.setItem("palette", JSON.stringify(palette));
            sessionStorage.setItem("textColor", palette.textColor);

            const root = document.documentElement;
            root.style.setProperty("--dominant", palette.dominant || "#000000");
            root.style.setProperty("--accent-bg", palette.palette[0] || "#fff");
            root.style.setProperty(
                "--accent-bg-light",
                palette.palette[1] || "#fff",
            );
            root.style.setProperty(
                "--accent-muted-light",
                palette.palette[2] || "#fff",
            );
            root.style.setProperty(
                "--accent-text",
                palette.textColor || "#ffffff",
            );
        }
        trackTitleMarquee?.refresh();
        let socket: WebSocket | undefined;
        function connectWebSocket() {
            socket = new WebSocket(
                "wss://enchanting-communication-production.up.railway.app/ws",
            );
            socket.onmessage = (event) => {
                const data = JSON.parse(event.data);
                sessionStorage.setItem("lastTrack", event.data);
                updateDOM(data);
                // trackTitleOverflowing();
            };
        }
        window.addEventListener("focus", () => {
            if (!socket || socket.readyState === WebSocket.CLOSED) {
                console.log("we lost the socket while u were gone, whoops");
                connectWebSocket();
            }
        });
        connectWebSocket();
    });
</script>

<div class="block w-full">
    <img
        src="/music.avif"
        alt="placeholder cover art"
        id="album-image"
        class="w-full max-w-250px aspect-ratio-square mb-0.5 b-cover-accent bg-cover-accent b-4 b-solid"
        loading="lazy"
        crossorigin="anonymous"
    />
    <div
        class="bottom-0 op-0 op-100 transition-delay-150 transition-200 w-full h-full z-2 flex justify-end items-end flex-col"
    >
        <div
            id="track-title"
            class="block text-nowrap overflow-x-clip my-0.5 text-4xl font-bold text-right w-max max-w-full"
            data-speed="0.75"
        >
            <a
                href="#"
                id="track-title-inner"
                class="font-bold inline hover:underline decoration-none"
                >loading...</a
            >
        </div>
        <div class="text-sm text-right w-4/5 italic inline" id="artist-names">
            <a href="#">please wait...</a>
        </div>
    </div>
</div>

<style>
    a#track-title-inner {
        @apply font-bold inline hover:underline decoration-2 decoration-dotted hover:text-glow hover:decoration-wavy hover:decoration-1 b-b-0;
    }
</style>
