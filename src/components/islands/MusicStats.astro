---
import "../../lib/helpers";
import { Image } from "astro:assets";
const { range } = Astro.props;
import musicPlaceholder from "../../assets/music.avif"
import type { ImageMetadata } from "astro";
import { refreshSpotifyToken, fetchTopTracks } from "../../lib/spotify";
import type {SimplifiedAlbum} from "spotify-types"

async function getStats(): Promise<SimplifiedAlbum[]> {
  const albums = new Map();
  if (!process.env.SPOTIFY_CLIENT_ID || !process.env.SPOTIFY_CLIENT_SECRET || !process.env.SPOTIFY_REFRESH_TOKEN) throw Error("bra u aint put spotify creds")
  const accessToken = await refreshSpotifyToken(process.env.SPOTIFY_CLIENT_ID, process.env.SPOTIFY_CLIENT_SECRET, process.env.SPOTIFY_REFRESH_TOKEN)
  const topTracks = await fetchTopTracks(range, accessToken)
  for (const track of topTracks) {
    if (albums.has(track.album.href)) {
      albums.get(track.album.href).count++
    } else {
      albums.set(track.album.href, {data: track.album, count: 1})
    }
  }
  return [...albums.values()].sort((a, b) => b.count - a.count).map((album) => album.data);

}

async function processCoverArt(
	release: SimplifiedAlbum,
	size = "250",
): Promise<string | ImageMetadata> {
    return `https://wsrv.nl/?url=${release.images[0].url}&output=webp&size=${size}`;
}

const stats = await getStats();
---


    <div class="music-stats">
        <ul class="flex flex-wrap-reverse flex-row gap-0 w-full justify-center">
            {[...stats].reverse().map(async (release, i) => (
                <a
                    href={release.external_urls.spotify}
                    class={`order-${i} relative overflow-hidden inline-block min-w-64 grow basis-64 group aspect-ratio-square duration-300 cursor-help gap-4`}
                >
                    <Image
                    width={i ===
                        stats.length - 1 &&
                    stats.length % 2 !== 0
                        ? "1200"
                        : "500"}
                    height={i ===
                        stats.length - 1 &&
                    stats.length % 2 !== 0
                        ? "1200"
                        : "500"}
                        src={await processCoverArt(release, i ===
                            stats.length - 1 &&
                        stats.length % 2 !== 0
                            ? "1200"
                            : "500")}
                        alt={`${release.name} cover art`}
                        class="w-full h-auto group-hover:m-0 group-hover:blur-none transition duration-300"
                        loading={i === stats.length - 1 &&
                        stats.length % 2 !== 0
                            ? "eager"
                            : "lazy"}
                    />

                    <!-- show title and artist in center on hover, and darken background -->
                    <div
                        class="absolute bg-cover-base top-0 op-0 group-hover:op-80 duration-200 w-full h-full z-1"
                    ></div>
                    <div
                        class="absolute bottom-0 op-0 group-hover:op-100 transition-delay-150 transition-200 w-full h-full z-2 flex justify-center items-center flex-col"
                    >
                        <p
                            class="text-sm op-50 text-center w-full italic"
                        >
                            {release.artists.map(artist => artist.name
                                .toRespectfulLowerCase()
                                .replaceAll("’", "'")).join(", ")}
                        </p>
                        <p
                            class="text-4xl !line-height-none font-bold text-center w-4/5"
                        >
                            {release.name
                                .toRespectfulLowerCase()
                                .replaceAll("’", "'")}
                        </p>
                    </div>
                </a>
            ))}
        </ul>
    </div>
